---
- hosts: registry
  remote_user: ubuntu
  gather_facts: False
  vars_files:
    - vars.yml
  vars:
    ansible_python_interpreter: "/usr/bin/python2.7"
  tasks:
    # wait for host to be available
    - name: waiting for server to accept SSH connections
      local_action:
        wait_for host="{{ inventory_hostname }}"
        port=22
        state=started
    - name: update apt cache
      raw: "sudo apt-get update"
    - name: install python 2.7 and aptitude
      raw: "sudo apt-get install -qq python2.7 aptitude"
    - name: get instance hostname
      shell:
        cmd: cat /etc/hostname
      register: instance_hostname
    - name: add hostname to /etc/hosts
      shell:
        cmd: echo "127.0.0.1 {{ instance_hostname }}" | sudo tee -a /etc/hosts
    - name: check external volume fs type
      become: yes
      filesystem:
        fstype: ext4
        dev: /dev/xvdh
    - name: mount data disk
      become: yes
      mount:
        name: "{{ system_data_dir }}"
        src: /dev/xvdh
        fstype: ext4
        opts: rw
        state: mounted
    - name: set permissions to data folder
      become: yes
      file:
        path: "{{ system_data_dir }}"
        owner: ubuntu
        group: ubuntu
        mode: "g=rwx,o=rwx"
    - name: add docker repo key with apt
      become: yes
      apt_key:
        id: "{{ docker_apt_key_id }}"
        keyserver: "{{ docker_apt_key_url }}"
        state: present
    - name: add docker repository to sources.list
      shell:
        cmd: echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | sudo tee /etc/apt/sources.list.d/docker.list
    - name: update apt cache
      become: yes
      apt:
        update_cache: yes
    - name: upgrade to latest
      become: yes
      apt:
        upgrade: safe
    - name: update kernel
      raw: "sudo apt-get install -qq linux-image-extra-$(uname -r) linux-image-extra-virtual"
    - name: install docker and extra apt packages
      become: yes
      apt:
        pkg: "{{ item }}"
        state: present
      with_items: "{{ apt_packages }}"
    - name: install docker-py
      become: yes
      pip:
        name: "docker-py"
        version: "1.9.0"
      environment:
        LC_ALL: "C"
    - name: add `ubuntu` to docker group
      user:
        append: yes
        groups: docker
        name: ubuntu
      become: yes
    - name: create ssl certs folder
      become: yes
      file:
        path: "{{ ssl_certs_dir_path }}"
        state: "directory"
    - name: update permissions on ssl certs folder
      become: yes
      file:
        path: "{{ ssl_certs_dir_path }}"
        mode: "g=rwx,o=rwx"
    - name: copy ssl certficate
      become: yes
      copy:
        src: "{{ ssl_crt_file }}"
        dest: "{{ ssl_certs_dir_path }}/registry-certificate.crt"
    - name: copy ssl key
      become: yes
      copy:
        src: "{{ ssl_key_file }}"
        dest: "{{ ssl_certs_dir_path }}/registry-key.key"
    - name: create registry directory
      become: yes
      file:
        path: "{{ registry_local_dir_path }}"
        state: directory
        owner: ubuntu
        group: ubuntu
    - name: create auth directory
      become: yes
      file:
        path: "{{ auth_local_dir_path }}"
        state: directory
        owner: ubuntu
        group: ubuntu
    - name: generate initial auth
      become: yes
      command: "docker run --entrypoint htpasswd registry:2 -Bbn {{ registry_user }} {{ registry_password }}"
      register: auth_result
    - name: save auth
      copy:
        content: "{{ auth_result.stdout }}"
        dest: "{{ auth_local_dir_path }}/passwd"
    - name: pull registry image
      become: yes
      docker_image:
        name: registry
        tag: 2
        state: present
    - name: run registry container
      become: yes
      docker_container:
        name: registry
        image: registry:2
        pull: yes
        restart_policy: always
        restart: yes
        env:
          REGISTRY_HTTP_TLS_CERTIFICATE: "{{ ssl_certs_dir_path }}/registry-certificate.crt"
          REGISTRY_HTTP_TLS_KEY: "{{ ssl_certs_dir_path }}/registry-key.key"
          REGISTRY_AUTH: "htpasswd"
          REGISTRY_AUTH_HTPASSWD_REALM: "Registry Realm"
          REGISTRY_AUTH_HTPASSWD_PATH: "{{ auth_local_dir_path }}/passwd"
          REGISTRY_HTTP_SECRET: "{{ registry_http_secret }}"
        volumes:
          - "{{ registry_local_dir_path }}:/var/lib/registry"
          - /var/run/docker.sock:/var/run/docker.sock
          - "{{ ssl_certs_dir_path }}:{{ ssl_certs_dir_path }}"
          - "{{ auth_local_dir_path }}:{{ auth_local_dir_path }}"
        published_ports:
          - 5000:5000
